services:
  # 資料庫服務
  postgres:
    image: postgres:15-alpine
    container_name: musicplayer-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_DB: ${POSTGRES_DB:-musicplayer}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-user} -d ${POSTGRES_DB:-musicplayer}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis快取服務
  redis:
    image: redis:7-alpine
    container_name: musicplayer-redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # 後端API服務
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: musicplayer-backend
    ports:
      - "${BACKEND_PORT:-3000}:3000"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://${POSTGRES_USER:-user}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-musicplayer}
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key-min-32-chars}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET:-your-super-secret-refresh-key-min-32-chars}
      - PORT=3000
      - FRONTEND_URL=http://localhost:${FRONTEND_PORT:-5173}
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: npm run dev
    restart: unless-stopped

  # 前端服務
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: musicplayer-frontend
    ports:
      - "${FRONTEND_PORT:-5173}:5173"
    environment:
      - VITE_API_URL=http://localhost:${BACKEND_PORT:-3000}
      - VITE_APP_NAME=${VITE_APP_NAME:-YouTube Music Player}
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    command: npm run dev
    restart: unless-stopped

  # 資料庫管理界面
  adminer:
    image: adminer:latest
    container_name: musicplayer-adminer
    ports:
      - "${ADMINER_PORT:-8080}:8080"
    depends_on:
      - postgres
    environment:
      ADMINER_DEFAULT_SERVER: postgres

volumes:
  postgres_data:
  redis_data: