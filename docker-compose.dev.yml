version: '3.8'

services:
  # 資料庫服務
  postgres:
    image: postgres:15-alpine
    container_name: musicplayer-postgres
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: musicplayer
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d musicplayer"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis快取服務
  redis:
    image: redis:7-alpine
    container_name: musicplayer-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # 後端API服務
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: musicplayer-backend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://user:password@postgres:5432/musicplayer
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-super-secret-jwt-key-min-32-chars
      - JWT_REFRESH_SECRET=your-super-secret-refresh-key-min-32-chars
      - PORT=3000
      - FRONTEND_URL=http://localhost:5173
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: npm run dev
    restart: unless-stopped

  # 前端服務
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: musicplayer-frontend
    ports:
      - "5173:5173"
    environment:
      - VITE_API_URL=http://localhost:3000
      - VITE_APP_NAME=YouTube Music Player
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    command: npm run dev
    restart: unless-stopped

  # 資料庫管理界面
  adminer:
    image: adminer:latest
    container_name: musicplayer-adminer
    ports:
      - "8080:8080"
    depends_on:
      - postgres
    environment:
      ADMINER_DEFAULT_SERVER: postgres

volumes:
  postgres_data:
  redis_data: